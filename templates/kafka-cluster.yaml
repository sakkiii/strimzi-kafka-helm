{{- if .Values.kafkaCluster.enabled }}
{{/*
CRITICAL: When KafkaNodePool resources are defined, the Kafka CR MUST have
the annotation "strimzi.io/node-pools: enabled" or the operator will ignore the pools.
This is automatically added below when .Values.kafkaCluster.nodePools is defined.
*/}}
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ include "strimzi-kafka.clusterName" . }}
  namespace: {{ include "strimzi-kafka.namespace" . }}
  labels:
    {{- include "strimzi-kafka.labels" . | nindent 4 }}
    strimzi.io/cluster: {{ include "strimzi-kafka.clusterName" . }}
  annotations:
    {{- if .Values.kafkaCluster.nodePools }}
    strimzi.io/node-pools: enabled  # Required when KafkaNodePool resources are used
    {{- end }}
    strimzi.io/kraft: enabled  # KRaft mode is mandatory - ZooKeeper is not supported
    {{- with .Values.global.commonAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  kafka:
    version: {{ .Values.kafkaCluster.version }}
    template:
      pod:
        {{- $podAnnotations := dict }}
        {{- with .Values.kafkaCluster.podAnnotations }}
          {{- $podAnnotations = merge $podAnnotations . }}
        {{- end }}
        {{- with .Values.global.commonAnnotations }}
          {{- $podAnnotations = merge $podAnnotations . }}
        {{- end }}
        {{- if $podAnnotations }}
        metadata:
          annotations:
            {{- toYaml $podAnnotations | nindent 12 }}
        {{- end }}
        {{- if .Values.kafkaCluster.nodePools }}
        {{- $nodePool := index .Values.kafkaCluster.nodePools 0 }}
        {{- $componentAffinity := $nodePool.affinity | default dict }}
        {{- $componentNodeSelector := $nodePool.nodeSelector | default dict }}
        {{- $componentTopologySpread := $nodePool.topologySpreadConstraints | default list }}
        {{- $componentTolerations := $nodePool.tolerations | default list }}
        {{- include "strimzi-kafka.scheduling" (dict "global" (dict "nodeSelector" .Values.global.nodeSelector "affinity" .Values.global.affinity "topologySpreadConstraints" .Values.global.topologySpreadConstraints) "component" (dict "nodeSelector" $componentNodeSelector "affinity" $componentAffinity "topologySpreadConstraints" $componentTopologySpread) "context" .) | nindent 8 }}
        {{- include "strimzi-kafka.tolerations" (dict "global" .Values.global.tolerations "component" $componentTolerations "context" .) | nindent 8 }}
        {{- end }}
    {{- if and .Values.kafkaCluster.rack .Values.kafkaCluster.rack.enabled }}
    rack:
      topologyKey: {{ .Values.kafkaCluster.rack.topologyKey }}
    {{- end }}
    {{- if .Values.kafkaCluster.authorization }}
    authorization:
      type: {{ .Values.kafkaCluster.authorization.type }}
      {{- if .Values.kafkaCluster.authorization.superUsers }}
      superUsers:
        {{- range .Values.kafkaCluster.authorization.superUsers }}
        - {{ . | quote }}
        {{- end }}
      {{- end }}
    {{- end }}
    listeners:
      {{- range .Values.kafkaCluster.listeners }}
      - name: {{ .name }}
        port: {{ .port }}
        type: {{ .type }}
        tls: {{ .tls | default true }}
        {{- if .authentication }}
        authentication:
          type: {{ .authentication.type }}
        {{- end }}
        {{- if .configuration }}
        configuration:
          {{- if eq .type "ingress" }}
          {{- if .configuration.class }}
          class: {{ .configuration.class }}
          {{- end }}
          {{- if .configuration.host }}
          {{- $listener := . }}
          bootstrap:
            host: {{ $listener.configuration.host }}
            {{- if $listener.configuration.annotations }}
            annotations:
              {{- toYaml $listener.configuration.annotations | nindent 14 }}
            {{- end }}
          brokers:
            {{- $maxBrokers := 10 }}
            {{- $hpaEnabled := $.Values.hpa.enabled }}
            {{- $totalReplicas := 0 }}
            {{- range $.Values.kafkaCluster.nodePools }}
              {{- $totalReplicas = add $totalReplicas .replicas }}
            {{- end }}
            {{- if $hpaEnabled }}
              {{- $maxReplicas := $.Values.hpa.maxReplicas }}
              {{- range $i := until (int $maxReplicas) }}
            - broker: {{ $i }}
              host: {{ printf "broker-%d-%s" $i $listener.configuration.host }}
              {{- if $listener.configuration.annotations }}
              annotations:
                {{- $brokerAnnotations := deepCopy $listener.configuration.annotations }}
                {{- $_ := set $brokerAnnotations "external-dns.alpha.kubernetes.io/hostname" (printf "broker-%d-%s" $i $listener.configuration.host) }}
                {{- toYaml $brokerAnnotations | nindent 16 }}
              {{- end }}
              {{- end }}
            {{- else }}
              {{- range $i := until (int $totalReplicas) }}
            - broker: {{ $i }}
              host: {{ printf "broker-%d-%s" $i $listener.configuration.host }}
              {{- if $listener.configuration.annotations }}
              annotations:
                {{- $brokerAnnotations := deepCopy $listener.configuration.annotations }}
                {{- $_ := set $brokerAnnotations "external-dns.alpha.kubernetes.io/hostname" (printf "broker-%d-%s" $i $listener.configuration.host) }}
                {{- toYaml $brokerAnnotations | nindent 16 }}
              {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .configuration.tls }}
          {{- if .configuration.tls.brokerSecretName }}
          brokerCertChainAndKey:
            secretName: {{ include "strimzi-kafka.secretName" (dict "Values" $.Values "Release" $.Release "Chart" $.Chart "secretName" .configuration.tls.brokerSecretName) }}
            certificate: {{ .configuration.tls.brokerCertificate | default "tls.crt" }}
            key: {{ .configuration.tls.brokerKey | default "tls.key" }}
          {{- end }}
          {{- end }}
          {{- else if eq .type "loadbalancer" }}
          {{- if .configuration.loadBalancerSourceRanges }}
          loadBalancerSourceRanges:
            {{- toYaml .configuration.loadBalancerSourceRanges | nindent 12 }}
          {{- end }}
          {{- if .configuration.annotations }}
          annotations:
            {{- toYaml .configuration.annotations | nindent 12 }}
          {{- end }}
          {{- else if eq .type "nodeport" }}
          {{- if .configuration.nodePort }}
          nodePort: {{ .configuration.nodePort }}
          {{- end }}
          {{- else }}
          {{- toYaml .configuration | nindent 10 }}
          {{- end }}
        {{- end }}
      {{- end }}
    config:
      {{- if and .Values.kafkaCluster.rack .Values.kafkaCluster.rack.enabled }}
      replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
      {{- end }}
      {{- toYaml .Values.kafkaCluster.config | nindent 6 }}
    {{- include "strimzi-kafka.metricsConfig" (dict "enabled" .Values.kafkaCluster.metricsConfig.enabled "context" .) | nindent 4 }}
  {{- if .Values.kafkaCluster.entityOperator.enabled }}
  entityOperator:
    topicOperator: {}
    userOperator: {}
    template:
      pod:
        {{- include "strimzi-kafka.podTemplate" (dict "global" .Values.global "component" .Values.kafkaCluster.entityOperator "context" .) | nindent 8 }}
  {{- end }}
  {{- if .Values.kafkaCluster.kafkaExporter.enabled }}
  kafkaExporter:
    resources:
      requests:
        cpu: {{ .Values.kafkaCluster.kafkaExporter.resources.requests.cpu }}
        memory: {{ .Values.kafkaCluster.kafkaExporter.resources.requests.memory }}
      limits:
        cpu: {{ .Values.kafkaCluster.kafkaExporter.resources.limits.cpu }}
        memory: {{ .Values.kafkaCluster.kafkaExporter.resources.limits.memory }}
    topicRegex: {{ .Values.kafkaCluster.kafkaExporter.topicRegex | quote }}
    groupRegex: {{ .Values.kafkaCluster.kafkaExporter.groupRegex | quote }}
    template:
      pod:
        {{- include "strimzi-kafka.podTemplate" (dict "global" .Values.global "component" .Values.kafkaCluster.kafkaExporter "context" .) | nindent 8 }}
  {{- end }}
  cruiseControl:
    {{- if .Values.kafkaCluster.cruiseControl.autoRebalance.enabled }}
    autoRebalance:
      {{- range .Values.kafkaCluster.cruiseControl.autoRebalance.modes }}
      - mode: {{ .mode }}
        template:
          name: {{ include "strimzi-kafka.templateName" (dict "Values" $.Values "Release" $.Release "Chart" $.Chart "templateName" .templateName) }}
      {{- end }}
    {{- end }}
    resources:
      requests:
        memory: {{ .Values.kafkaCluster.cruiseControl.resources.requests.memory }}
        cpu: {{ .Values.kafkaCluster.cruiseControl.resources.requests.cpu }}
      limits:
        memory: {{ .Values.kafkaCluster.cruiseControl.resources.limits.memory }}
        cpu: {{ .Values.kafkaCluster.cruiseControl.resources.limits.cpu }}
    template:
      pod:
        {{- include "strimzi-kafka.podTemplate" (dict "global" .Values.global "component" .Values.kafkaCluster.cruiseControl "context" .) | nindent 8 }}
    {{- include "strimzi-kafka.metricsConfig" (dict "enabled" .Values.kafkaCluster.cruiseControl.metricsConfig.enabled "context" .) | nindent 4 }}
    config:
      {{- toYaml .Values.kafkaCluster.cruiseControl.config | nindent 6 }}
---
{{- range .Values.kafkaCluster.nodePools }}
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: {{ include "strimzi-kafka.nodePoolName" (dict "name" .name "Values" $.Values "Release" $.Release "Chart" $.Chart) }}
  namespace: {{ include "strimzi-kafka.namespace" $ }}
  labels:
    {{- include "strimzi-kafka.labels" $ | nindent 4 }}
    strimzi.io/cluster: {{ include "strimzi-kafka.clusterName" $ }}
  annotations:
    {{- if .nextNodeIds }}
    strimzi.io/next-node-ids: "{{ .nextNodeIds }}"
    {{- else }}
    {{- /* Provide safe default node ID ranges based on pool index and roles */}}
    {{- $poolIndex := 0 }}
    {{- range $i, $pool := $.Values.kafkaCluster.nodePools }}
      {{- if eq $pool.name .name }}
        {{- $poolIndex = $i }}
      {{- end }}
    {{- end }}
    {{- if has "controller" .roles }}
    strimzi.io/next-node-ids: "[{{ mul $poolIndex 100 }}-{{ add (mul $poolIndex 100) 99 }}]"  # Controller pool: {{ $poolIndex }}00-{{ $poolIndex }}99
    {{- else if has "broker" .roles }}
    strimzi.io/next-node-ids: "[{{ add (mul $poolIndex 100) 1000 }}-{{ add (mul $poolIndex 100) 1099 }}]"  # Broker pool: {{ add (mul $poolIndex 100) 1000 }}-{{ add (mul $poolIndex 100) 1099 }}
    {{- else }}
    strimzi.io/next-node-ids: "[{{ add (mul $poolIndex 100) 2000 }}-{{ add (mul $poolIndex 100) 2099 }}]"  # Dual-role pool: {{ add (mul $poolIndex 100) 2000 }}-{{ add (mul $poolIndex 100) 2099 }}
    {{- end }}
    {{- end }}
    {{- with $.Values.global.commonAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .replicas }}
  roles:
    {{- range .roles }}
    - {{ . }}
    {{- end }}
  resources:
    requests:
      memory: {{ dig "resources" "requests" "memory" "4Gi" . }}
      cpu: {{ dig "resources" "requests" "cpu" "1" . }}
    limits:
      memory: {{ dig "resources" "limits" "memory" "4Gi" . }}
      cpu: {{ dig "resources" "limits" "cpu" "2" . }}
  {{- if .jvmOptions }}
  jvmOptions:
    {{- if .jvmOptions.xms }}
    -Xms: {{ .jvmOptions.xms | quote }}
    {{- end }}
    {{- if .jvmOptions.xmx }}
    -Xmx: {{ .jvmOptions.xmx | quote }}
    {{- end }}
  {{- end }}
  {{- if .storage }}
  storage:
    type: {{ .storage.type }}
    volumes:
      {{- range .storage.volumes }}
      - id: {{ .id }}
        type: {{ .type }}
        size: {{ .size }}
        deleteClaim: {{ .deleteClaim }}
        kraftMetadata: {{ .kraftMetadata }}
        {{- if .storageClass }}
        class: {{ .storageClass }}
        {{- end }}
      {{- end }}
  {{- end }}
  {{/* Check if global scheduling settings are defined */}}
  {{- $hasGlobalScheduling := or $.Values.global.nodeSelector $.Values.global.affinity $.Values.global.topologySpreadConstraints $.Values.global.tolerations -}}
  {{- if $hasGlobalScheduling -}}
    {{/* Check if node pool has any pod template configuration */}}
    {{- $hasPodConfig := or .nodeSelector .affinity .tolerations .topologySpreadConstraints .terminationGracePeriodSeconds -}}
    {{- if not $hasPodConfig -}}
      {{- fail (printf "Global scheduling settings are defined but node pool '%s' is missing pod template configuration. Please add nodeSelector, affinity, tolerations, or topologySpreadConstraints to inherit global settings." .name) -}}
    {{- end -}}
  {{- end -}}
  
  {{- if or .nodeSelector .affinity .tolerations .topologySpreadConstraints .terminationGracePeriodSeconds }}
  template:
    pod:
      {{- include "strimzi-kafka.podTemplate" (dict "global" $.Values.global "component" . "context" $) | nindent 6 }}
  {{- end }}
---
{{- end }}
{{- end }}